/**
 * News Feed
 * news feed api
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Eclipse Public License - v 1.0
 *
 * https://www.eclipse.org/legal/epl-v10.html
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package info.glennengstrand.resources;

import info.glennengstrand.api.Outbound;
import info.glennengstrand.core.OutboundApiServiceImpl;
import info.glennengstrand.resources.OutboundApi.OutboundApiService;
import info.glennengstrand.core.MessageLogger;
import info.glennengstrand.db.OutboundDAO;
import info.glennengstrand.db.SearchDAO;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.List;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;

/**
 * API tests for OutboundApi
 */
public class OutboundApiTest extends NewsFeedTestBase {

	private OutboundDAO outDao = null;
	private OutboundApiService api = null;
	private Outbound outbound = null;
	private SearchDAO esdao = new UnitTestSearchDAO();
	private List<Outbound> outFeed = new ArrayList<Outbound>();
	private List<Long> searchResults = new ArrayList<Long>();

	@Before
	public void setup() {
		setupFriendSupport();
		setupInboundSupport();
		outbound = new Outbound.OutboundBuilder()
				.withFrom(TEST_ID)
				.withOccurred(new DateTime(System.currentTimeMillis()))
				.withSubject(TEST_SUBJECT)
				.withStory(TEST_STORY)
				.build();
		outFeed.add(outbound);
		outDao = mock(OutboundDAO.class);
		when(outDao.fetch(TEST_ID)).thenReturn(outFeed);
		api = new OutboundApiServiceImpl(outDao, inDao, friendApi, esdao, new MessageLogger.DoNothingMessageLogger());
		searchResults.add(TEST_ID);
	}

	/**
	 * create a participant news item
	 *
	 * socially broadcast participant news
	 *
	 */
	@Test
	public void addOutboundTest() {
		assertTrue("Expected add outbound to return the input object but it did not.", api.addOutbound(outbound).equals(outbound));
	}

	/**
	 * retrieve the news posted by an individual participant
	 *
	 * fetch a participant news
	 *
	 */
	@Test
	public void getOutboundTest() {
		assertTrue("Fetch outbound feed did not return expected results.", api.getOutbound(TEST_FROM).equals(outFeed));
	}

	/**
	 * create a participant news item
	 *
	 * keyword search of participant news
	 *
	 */
	@Test
	public void searchOutboundTest() {
		assertTrue("Feed search did not return expected results.", api.searchOutbound(TEST_SUBJECT).equals(searchResults));
	}

	class UnitTestSearchDAO extends SearchDAO {

		@Override
		public List<Long> find(String keywords) {
			return searchResults;
		}

		@Override
		public void upsert(UpsertRequest doc) {
		}

	}

}
