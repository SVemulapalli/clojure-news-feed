/**
 * News Feed
 * news feed api
 *
 * OpenAPI spec version: 1.0.0
 * Contact: media@glennengstrand.info
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 */

package info.glennengstrand.news.api

import info.glennengstrand.news.model.{Participant, Friend, Inbound, Outbound}
import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._
import info.glennengstrand.news.DI._

class ParticipantApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "ParticipantApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }

  val addParticipantOperation = (apiOperation[Participant]("addParticipant")
    summary "create a new participant"
    parameters (bodyParam[Participant]("body").description("")))

  post("/", operation(addParticipantOperation)) {

    val body = parsedBody.extract[Participant]

    participantService.add(0, body)
  }

  val getParticipantOperation = (apiOperation[Participant]("getParticipant")
    summary "retrieve an individual participant"
    parameters (pathParam[Long]("id").description("")))

  get("/:id", operation(getParticipantOperation)) {

    val id = params.getOrElse("id", halt(400))

    participantService.get(id.toLong)
  }
  
    val addFriendOperation = (apiOperation[Friend]("addFriend")
    summary "create a new friendship"
    parameters (pathParam[Long]("id").description(""), bodyParam[Friend]("body").description("")))

  post("/:id/friends", operation(addFriendOperation)) {
      val id = params.getOrElse("id", halt(400))

    val body = parsedBody.extract[Friend]

    friendService.add(id.toLong, body)
  }

  val getFriendOperation = (apiOperation[List[Friend]]("getFriend")
    summary "retrieve the list of friends for an individual participant"
    parameters (pathParam[Long]("id").description("")))

  get("/:id/friends", operation(getFriendOperation)) {

    val id = params.getOrElse("id", halt(400))

    friendService.gets(id.toLong)
  }
  
  val getInboundOperation = (apiOperation[List[Inbound]]("getInbound")
    summary "retrieve the inbound feed for an individual participant"
    parameters (pathParam[Long]("id").description("")))

  get("/:id/inbound", operation(getInboundOperation)) {

    val id = params.getOrElse("id", halt(400))

    inboundService.gets(id.toLong)
  }
  
  val addOutboundOperation = (apiOperation[Outbound]("addOutbound")
    summary "create a participant news item"
    parameters (pathParam[Long]("id").description(""), bodyParam[Outbound]("body").description("")))

  post("/:id/outbound", operation(addOutboundOperation)) {
    val id = params.getOrElse("id", halt(400))
    val body = parsedBody.extract[Outbound]

    outboundService.add(id.toLong, body)
  }

  val getOutboundOperation = (apiOperation[List[Outbound]]("getOutbound")
    summary "retrieve the news posted by an individual participant"
    parameters (pathParam[Long]("id").description("")))

  get("/:id/outbound", operation(getOutboundOperation)) {

    val id = params.getOrElse("id", halt(400))

    outboundService.gets(id.toLong)
  }
}
